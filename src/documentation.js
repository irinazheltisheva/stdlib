export default [{"name":"DOM.canvas","section":"DOM.<b>canvas</b>(<i>width</i>, <i>height</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/canvas.js \"Source\")\n\nReturns a new canvas element with the specified *width* and *height*. For example, to create a 960×500 canvas:\n\n```js\nDOM.canvas(960, 500)\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<canvas width=960 height=500>`\n```\n\nIf you are using [2D Canvas](https://www.w3.org/TR/2dcontext/) (rather than [WebGL](https://webglfundamentals.org/)), you should use [DOM.context2d](#DOM_context2d) instead of DOM.canvas for automatic pixel density scaling."},{"name":"DOM.context2d","section":"DOM.<b>context2d</b>(<i>width</i>, <i>height</i>[, <i>dpi</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/context2d.js \"Source\")\n\nReturns a new canvas context with the specified *width* and *height* and the specified device pixel ratio *dpi*. If *dpi* is not specified, it defaults to [*window*.devicePixelRatio](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio). To access the context’s canvas, use [*context*.canvas](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas). For example, to create a 960×500 canvas:\n\n```js\n{\n  const context = DOM.context2d(960, 500);\n  return context.canvas;\n}\n```\n\nIf you are using [WebGL](https://webglfundamentals.org/) (rather than [2D Canvas](https://www.w3.org/TR/2dcontext/)), you should use [DOM.canvas](#DOM_canvas) or  the [html](#html) tagged template literal instead of DOM.context2d."},{"name":"DOM.download","section":"DOM.<b>download</b>(<i>object</i>\\[, <i>name</i>\\]\\[, <i>value</i>\\]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/download.js \"Source\")\n\nReturns an anchor element containing a button that when clicked will download a file representing the specified *object*. The *object* should be anything supported by [URL.createObjectURL](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL) such as a [file](https://developer.mozilla.org/docs/Web/API/File) or a [blob](https://developer.mozilla.org/docs/Web/API/Blob). For example, to create a button to download a Canvas element as a PNG:\n\n```js\nDOM.download(await new Promise(resolve => canvas.toBlob(resolve)))\n```\n\nThe *object* may also be specified as a function, in which case the function is called when the download button is clicked. For example:\n\n```js\nDOM.download(() => new Promise(resolve => canvas.toBlob(resolve)))\n```\n\nIf the *object* is a promise, or if it is a function that returns a promise, the promise will be awaited before downloading. If necessary, an additional click may be required to download the asynchronous value."},{"name":"DOM.element","section":"DOM.<b>element</b>(<i>name</i>[, <i>attributes</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/element.js \"Source\")\n\nReturns a new element with the specified *name*. For example, to create an empty H1 element:\n\n```js\nDOM.element(\"h1\")\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<h1>`\n```\n\nIf *attributes* is specified, sets any attributes in the specified object before returning the new element. For example:\n\n```js\nDOM.element(\"a\", {target: \"_blank\"})\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<a target=_blank>`\n```\n\nIf the *name* has the prefix `svg:`, `math:` or `xhtml:`, uses [*document*.createElementNS](https://developer.mozilla.org/docs/Web/API/Document/createElementNS) instead of [*document*.createElement](https://developer.mozilla.org/docs/Web/API/Document/createElement). For example, to create an empty SVG element (see also [DOM.svg](#DOM_svg)):\n\n```js\nDOM.element(\"svg:svg\")\n```\n\nThis is equivalent to using the [svg](#svg) (or [html](#html)) tagged template literal:\n\n```js\nsvg`<svg>`\n```\n\nIn general, you probably want to use the [html](#html) or [svg](#svg) tagged template literal instead of DOM.element."},{"name":"DOM.input","section":"DOM.<b>input</b>([<i>type</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/input.js \"Source\")\n\nReturns a new input element with the specified *type*. If *type* is not specified or null, a text input is created. For example, to create a new file input:\n\n```js\nDOM.input(\"file\")\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<input type=file>`\n```\n\nIn general, you probably want to use the [html](#html) tagged template literal instead of DOM.input."},{"name":"DOM.range","section":"DOM.<b>range</b>(\\[<i>min</i>, \\]\\[<i>max</i>\\]\\[, <i>step</i>\\]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/range.js \"Source\")\n\nReturns a new range input element. (See also [DOM.input](#input).) If *max* is specified, sets the maximum value of the range to the specified number; if *max* is not specified or null, sets the maximum value of the range to 1. If *min* is specified, sets the minimum value of the range to the specified number; if *min* is not specified or null, sets the minimum value of the range to 0. If *step* is specified, sets the step value of the range to the specified number; if *step* is not specified or null, sets the step value of the range to `any`. For example, to create a slider that ranges the integers from -180 to +180, inclusive:\n\n```js\nDOM.range(-180, 180, 1)\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<input type=range min=-180 max=180 step=1>`\n```\n\nIn general, you probably want to use the [html](#html) tagged template literal instead of DOM.input."},{"name":"DOM.select","section":"DOM.<b>select</b>(<i>values</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/select.js \"Source\")\n\nReturns a new select element with an option for each string in the specified *values* array. For example, to create a drop-down menu of three colors:\n\n```js\nDOM.select([\"red\", \"green\", \"blue\"])\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n```js\nhtml`<select>\n  <option value=\"red\">red</option>\n  <option value=\"green\">green</option>\n  <option value=\"blue\">blue</option>\n</select>`\n```\n\nOr, from an array of data:\n\n```js\nhtml`<select>${colors.map(color => `\n  <option value=\"${color}\">${color}</option>`)}\n</select>`\n```\n\nIn general, you probably want to use the [html](#html) tagged template literal instead of DOM.select, particularly if you want greater control of the display, such as to customize the displayed option labels."},{"name":"DOM.svg","section":"DOM.<b>svg</b>(<i>width</i>, <i>height</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/svg.js \"Source\")\n\nReturns a new SVG element with the specified *width* and *height*. For example, to create a 960×500 blank SVG:\n\n```js\nDOM.svg(960, 500)\n```\n\nThis is equivalent to using the [svg](#svg) tagged template literal:\n\n```js\nsvg`<svg width=960 height=500 viewBox=\"0,0,960,500\">`\n```\n\nTo create responsive SVG, set the max-width to 100% and the height to auto:\n\n```js\nsvg`<svg\n  width=960\n  height=500\n  viewBox=\"0,0,960,500\"\n  style=\"max-width:100%;height:auto;\"\n>`\n```\n\nIn general, you probably want to use the [html](#html) or [svg](#svg) tagged template literal instead of DOM.svg."},{"name":"DOM.text","section":"DOM.<b>text</b>(<i>string</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/text.js \"Source\")\n\nReturns a new text node with the specified *string* value. For example, to say hello:\n\n```js\nDOM.text(\"Hello, world!\")\n```\n\nThis is equivalent to using the [html](#html) tagged template literal:\n\n\n```js\nhtml`Hello, world!`\n```\n\nIn general, you probably want to use the [html](#html) tagged template literal instead of DOM.text."},{"name":"DOM.uid","section":"DOM.<b>uid</b>([<i>name</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/dom/uid.js \"Source\")\n\nReturns a new unique *identifier*. If *name* is specified, the *identifier*.id will be derived from the specified *name*, which may be useful for debugging. If DOM.uid is called repeatedly with the same *name*, every returned *identifier* is still unique (that is, different). Identifiers are useful in SVG: use *identifier*.href for IRI references, such as the [xlink:href](https://www.w3.org/TR/SVG/animate.html#HrefAttribute) attribute; use *identifier*.toString for functional notation, such as the [clip-path](https://www.w3.org/TR/SVG/masking.html#ClipPathProperty) presentation attribute.\n\nFor example, to [clip the Mona Lisa](https://beta.observablehq.com/@mbostock/svg-clipping-test) to a circle of radius 320px:\n\n```js\n{\n  const clip = DOM.uid(\"clip\");\n  return svg`<svg width=\"640\" height=\"640\">\n  <defs>\n    <clipPath id=\"${clip.id}\">\n      <circle cx=\"320\" cy=\"320\" r=\"320\"></circle>\n    </clipPath>\n  </defs>\n  <image\n    clip-path=\"${clip}\"\n    width=\"640\" height=\"640\"\n    preserveAspectRatio=\"xMidYMin slice\"\n    xlink:href=\"https://gist.githubusercontent.com/mbostock/9511ae067889eefa5537eedcbbf87dab/raw/944b6e5fe8dd535d6381b93d88bf4a854dac53d4/mona-lisa.jpg\"\n  ></image>\n</svg>`;\n}\n```\n\nThe use of DOM.uid is strongly recommended over hand-coding as it ensures that your identifiers are still unique if your code is imported into another notebook. Because *identifier*.href and *identifier*.toString return absolute rather than local IRIs, it also works well in conjunction with a notebook’s [base URL](https://developer.mozilla.org/docs/Web/HTML/Element/base)."},{"name":"Files.buffer","section":"Files.<b>buffer</b>(<i>file</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/files/buffer.js \"Source\")\n\nReads the specified *file*, returning a promise of the ArrayBuffer yielded by [*fileReader*.readAsArrayBuffer](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer). This is useful for reading binary files, such as shapefiles and ZIP archives."},{"name":"Files.text","section":"Files.<b>text</b>(<i>file</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/files/text.js \"Source\")\n\nReads the specified *file*, returning a promise of the string yielded by [*fileReader*.readAsText](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText). This is useful for reading text files, such as plain text, CSV, Markdown and HTML."},{"name":"Files.url","section":"Files.<b>url</b>(<i>file</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/files/url.js \"Source\")\n\nReads the specified *file*, returning a promise of the data URL yielded by [*fileReader*.readAsDataURL](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL). This is useful for reading a file into memory, represented as a data URL. For example, to display a local file as an image:\n\n```js\nFiles.url(file).then(url => {\n  var image = new Image;\n  image.src = url;\n  return image;\n})\n```\n\nA data URL may be significantly less efficient than [URL.createObjectURL](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL) method for large files. For example:\n\n```js\n{\n  const image = new Image;\n  image.src = URL.createObjectURL(file);\n  invalidation.then(() => URL.revokeObjectURL(image.src));\n  return image;\n}\n```"},{"name":"Generators.disposable","section":"Generators.<b>disposable</b>(<i>value</i>, <i>dispose</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/disposable.js \"Source\")\n\nReturns a new generator that yields the specified *value* exactly once. The [*generator*.return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) method of the generator will call the specified *dispose* function, passing in the specified *value*. When this generator is the return value of a cell, this allows resources associated with the specified *value* to be disposed automatically when a cell is re-evaluated: *generator*.return is called by the Observable runtime on invalidation.  For example, to define a cell that creates a self-disposing [Tensor](https://js.tensorflow.org/):\n\n```js\nx = Generators.disposable(tf.tensor2d([[0.0, 2.0], [4.0, 6.0]]), x => x.dispose())\n```\n\nSee also [invalidation](#invalidation)."},{"name":"Generators.filter","section":"Generators.<b>filter</b>(<i>iterator</i>, <i>test</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/filter.js \"Source\")\n\nReturns a generator that yields a subset of values from the specified *iterator*, if and only if the specified *test* function returns truthy for the given value. The *test* function is invoked with the current value from the *iterator* and the current index, starting at 0 and increasing by one. For example, to yield only odd integers in [0, 100]:\n\n```js\nx = Generators.filter(Generators.range(100), x => x & 1)\n```\n\nThis method assumes that the specified *iterator* is synchronous; if the *iterator* yields a promise, this method does not wait for the promise to resolve before continuing. If the specified *iterator* is a generator, this method also does not (currently) wrap the specified generator’s [return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) and [throw](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw) methods."},{"name":"Generators.input","section":"Generators.<b>input</b>(<i>input</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/input.js \"Source\")\n\nReturns a new generator that yields promises to the current value of the specified *input* element; each promise resolves when the *input* element emits an event. (The promise resolves when the event is emitted, even if the value of the input is unchanged.) If the initial value of the *input* is not undefined, the returned generator’s first yielded value is a resolved promise with the initial value of the *input*.\n\nThe type of event that triggers promise resolution depends on the *input*.type as follows:\n\n* For button, submit and checkbox inputs, *click* events.\n* For file inputs, *change* events.\n* For all other types, *input* events.\n\nThe resolved value is likewise dependent on the *input*.type as follows:\n\n* For range and number inputs, *input*.valueAsNumber.\n* For date inputs, *input*.valueAsDate.\n* For checkbox inputs, *input*.checked.\n* For single-file inputs (*input*.multiple is falsey), *input*.files[0].\n* For multi-file inputs (*input*.multiple is truthy), *input*.files.\n* For all other types, *input*.value.\n\nThe specified *input* need not be an HTMLInputElement, but it must support the *target*.addEventListener and *target*.removeEventListener methods of the [EventTarget interface](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener).\n\nGenerators.input is used by Observable’s [viewof operator](https://beta.observablehq.com/@mbostock/a-brief-introduction-to-viewof) to define the current value of a view, and is based on [Generators.observe](#Generators_observe). One often does not use Generators.input directly, but it can be used to define a [generator cell](https://beta.observablehq.com/@mbostock/generator-cells-functions-and-objects) exposing the current value of an input, and you can also read the yielded values by hand. For example, to accumulate the first four values:\n\n```js\n{\n  const values = [];\n  for (const value of Generators.input(element)) {\n    if (values.push(await value) >= 4) {\n      return values;\n    }\n  }\n}\n```\n\nGenerators.input is lossy and may skip values: if more than one event is emitted before the next promise is pulled from the generator (more than once per animation frame), then the next promise returned by the generator will be resolved with the latest *input* value, potentially skipping intermediate values. See [Generators.queue](#Generators_queue) for a non-debouncing generator."},{"name":"Generators.map","section":"Generators.<b>map</b>(<i>iterator</i>, <i>transform</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/map.js \"Source\")\n\nReturns a generator that yields transformed values from the specified *iterator*, applying the specified *transform* function to each value. The *transform* function is invoked with the current value from the *iterator* and the current index, starting at 0 and increasing by one. For example, to yield perfect squares:\n\n```js\nx = Generators.map(Generators.range(100), x => x * x)\n```\n\nThis method assumes that the specified *iterator* is synchronous; if the *iterator* yields a promise, this method does not wait for the promise to resolve before continuing. If the specified *iterator* is a generator, this method also does not (currently) wrap the specified generator’s [return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) and [throw](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw) methods."},{"name":"Generators.observe","section":"Generators.<b>observe</b>(<i>initialize</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/observe.js \"Source\")\n\nReturns a generator that yields promises to an observable value, adapting a push-based data source (such as an [Observable](https://github.com/tc39/proposal-observable/blob/master/README.md), an [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) or an [EventTarget](https://developer.mozilla.org/docs/Web/API/EventTarget)) to a pull-based one.\n\nThe specified *initialize* function is invoked before Generators.observe returns, being passed a *change* function; calling *change* triggers the resolution of the current promise with the passed value. The *initialize* function may also return a *dispose* function; this function will be called when the generator is [disposed](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return). (See [invalidation](#invalidation).)\n\nFor example, to observe the current value of a text input element, you might say:\n\n```js\nGenerators.observe(change => {\n\n  // An event listener to yield the element’s new value.\n  const inputted = () => change(element.value);\n\n  // Attach the event listener.\n  element.addEventListener(\"input\", inputted);\n\n  // Yield the element’s initial value.\n  change(element.value);\n\n  // Detach the event listener when the generator is disposed.\n  return () => element.removeEventListener(\"input\", inputted);\n})\n```\n\n(See also [Generators.input](#Generators_input).)\n\nGenerators.observe is typically used to define a [generator cell](https://beta.observablehq.com/@mbostock/generator-cells-functions-and-objects), but you can also read the yielded values by hand. For example, to accumulate the first four values:\n\n```js\n{\n  const generator = Generators.observe(…);\n  const values = [];\n  for (const value of generator) {\n    if (values.push(await value) >= 4) {\n      return values;\n    }\n  }\n}\n```\n\nGenerators.observe is lossy and may skip values: if *change* is called more than once before the next promise is pulled from the generator (more than once per animation frame), then the next promise returned by the generator will be resolved with the latest value passed to *change*, potentially skipping intermediate values. See [Generators.queue](#Generators_queue) for a non-debouncing generator."},{"name":"Generators.queue","section":"Generators.<b>queue</b>(<i>initialize</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/queue.js \"Source\")\n\nReturns a generator that yields promises to an observable value, adapting a push-based data source (such as an [Observable](https://github.com/tc39/proposal-observable/blob/master/README.md), an [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) or an [EventTarget](https://developer.mozilla.org/docs/Web/API/EventTarget)) to a pull-based one. The specified *initialize* function is invoked before Generators.queue returns, being passed a *change* function; calling *change* triggers the resolution of the current promise with the passed value. The *initialize* function may also return a *dispose* function; this function will be called when the generator is [disposed](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return). (See [invalidation](#invalidation).)\n\nFor example, to observe the value of a text input element, you might say:\n\n```js\nGenerators.queue(change => {\n\n  // An event listener to yield the element’s new value.\n  const inputted = () => change(element.value);\n\n  // Attach the event listener.\n  element.addEventListener(\"input\", inputted);\n\n  // Yield the element’s initial value.\n  change(element.value);\n\n  // Detach the event listener when the generator is disposed.\n  return () => element.removeEventListener(\"input\", inputted);\n})\n```\n\n(See also [Generators.input](#Generators_input).)\n\nGenerators.queue is typically used to define a [generator cell](https://beta.observablehq.com/@mbostock/generator-cells-functions-and-objects), but you can also read the yielded values by hand. For example, to accumulate the first four values:\n\n```js\n{\n  const generator = Generators.queue(…);\n  const values = [];\n  for (const value of generator) {\n    if (values.push(await value) >= 4) {\n      return values;\n    }\n  }\n}\n```\n\nGenerators.queue is non-lossy and, as a result, may yield “stale” values: if *change* is called more than once before the next promise is pulled from the generator (more than once per animation frame), the passed values are queued in order and the generator will return resolved promises until the queue is empty again. See [Generators.observe](#Generators_observe) for a debouncing generator."},{"name":"Generators.range","section":"Generators.<b>range</b>([<i>start</i>, ]<i>stop</i>[, <i>step</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/range.js \"Source\")\n\nReturns a generator yielding an arithmetic progression, similar to the Python built-in [range](https://docs.python.org/3/library/stdtypes.html#typesseq-range). This method is often used to iterate over a sequence of uniformly-spaced numeric values, such as the indexes of an array or the ticks of a linear scale. (See also [d3.range](https://github.com/d3/d3-array/blob/master/README.md#range).)\n\nFor example, to iterator over the integers from 0 to 100:\n\n```js\ni = {\n  for (const i of Generators.range(0, 100, 1)) {\n    yield i;\n  }\n}\n```\n\nOr more simply:\n\n```js\ni = Generators.range(100)\n```\n\nIf *step* is omitted, it defaults to 1. If *start* is omitted, it defaults to 0. The *stop* value is exclusive; it is not included in the result. If *step* is positive, the last element is the largest *start* + *i* \\* *step* less than *stop*; if *step* is negative, the last element is the smallest *start* + *i* \\* *step* greater than *stop*. If the returned array would contain an infinite number of values, an empty range is returned.\n\nThe arguments are not required to be integers; however, the results are more predictable if they are. The values in the returned array are defined as *start* + *i* \\* *step*, where *i* is an integer from zero to one minus the total number of elements in the returned array. For example:\n\n```js\nGenerators.range(0, 1, 0.2) // 0, 0.2, 0.4, 0.6000000000000001, 0.8\n```\n\nThis unexpected behavior is due to IEEE 754 double-precision floating point, which defines 0.2 * 3 = 0.6000000000000001. Use [d3-format](https://github.com/d3/d3-format) to format numbers for human consumption with appropriate rounding.\n\nLikewise, if the returned array should have a specific length, consider using [*array*.map](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on an integer range. For example:\n\n```js\n[...Generators.range(0, 1, 1 / 49)] // BAD: returns 50 elements!\n```\n\n```js\n[...Generators.range(49)].map(d => d / 49) // GOOD: returns 49 elements.\n```"},{"name":"Generators.valueAt","section":"Generators.<b>valueAt</b>(<i>iterator</i>, <i>index</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/valueAt.js \"Source\")\n\nReturns the value from the specified *iterator* at the specified *index*. For example, to return the first element from the iterator:\n\n```js\nfirst = Generators.valueAt(iterator, 0)\n```\n\nThis method assumes that the specified *iterator* is synchronous; if the *iterator* yields a promise, this method does not wait for the promise to resolve before continuing."},{"name":"Generators.worker","section":"Generators.<b>worker</b>(<i>source</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/generators/worker.js \"Source\")\n\nReturns a new [disposable generator](#Generators_disposable) that yields a [dedicated Worker](https://developer.mozilla.org/docs/Web/API/Web_Workers_API) running the specified JavaScript *source*. For example, to create a worker that echos messages sent to it:\n\n```js\nworker = Generators.worker(`\nonmessage = function({data}) {\n  postMessage({echo: data});\n};\n`)\n```\n\nThe worker will be automatically [terminated](https://developer.mozilla.org/docs/Web/API/Worker/terminate) when [*generator*.return](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) is called."},{"name":"Promises.delay","section":"Promises.<b>delay</b>(<i>duration</i>[, <i>value</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/promises/delay.js \"Source\")\n\nReturns a promise that resolves with the specified *value* after the specified *duration* in milliseconds. For example, to define a cell that increments approximately every second:\n\n```js\ni = {\n  let i = 0;\n  yield i;\n  while (true) {\n    yield Promises.delay(1000, ++i);\n  }\n}\n```\n\nIf you desire precise synchronization, such as a timer that ticks exactly every second, use [Promises.tick](#Promises_tick) instead of Promises.delay."},{"name":"Promises.tick","section":"Promises.<b>tick</b>(<i>duration</i>[, <i>value</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/promises/tick.js \"Source\")\n\nReturns a promise that resolves with the specified *value* at the next integer multiple of *milliseconds* since the UNIX epoch. This is much like [Promises.delay](#Promises_delay), except it allows promises to be synchronized. For example, to define a cell that increments every second, on the second:\n\n```js\ni = {\n  let i = 0;\n  yield i;\n  while (true) {\n    yield Promises.tick(1000, ++i);\n  }\n}\n```\n\nOr, as an async generator:\n\n```js\ni = {\n  let i = 0;\n  while (true) {\n    yield i++;\n    await Promises.tick(1000);\n  }\n}\n```"},{"name":"Promises.when","section":"Promises.<b>when</b>(<i>date</i>[, <i>value</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/promises/when.js \"Source\")\n\nReturns a promise that resolves with the specified *value* at the specified *date*. This method relies on [setTimeout](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout), and thus the specified *date* must be no longer than 2,147,483,647 milliseconds (24.9 days) from now."},{"name":"invalidation","section":"<b>invalidation</b>\n\nA promise that resolves when the current cell is re-evaluated: when the cell’s code changes, when it is run using Shift-Enter, or when a referenced input changes. This promise is typically used to dispose of resources that were allocated by the cell. For example, to abort a fetch if the cell is invalidated:\n\n```js\n{\n  const controller = new AbortController;\n  invalidation.then(() => controller.abort());\n  const response = await fetch(url, {signal: controller.signal});\n  return response.json();\n}\n```\n\nThe invalidation promise is provided by the runtime rather than the standard library because it resolves to a new promise each time a cell is evaluated. See also [Generators.disposable](#Generators_disposable)."},{"name":"now","section":"<b>now</b> [<>](https://github.com/observablehq/stdlib/blob/master/src/now.js \"Source\")\n\nThe current value of [Date.now](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/now). For example, to display the current time in Markdown:\n\n```js\nmd`The current time is: ${new Date(now).toISOString()}`\n```"},{"name":"width","section":"<b>width</b> [<>](https://github.com/observablehq/stdlib/blob/master/src/width.js \"Source\")\n\nThe current width of cells. For example, to make a rounded rectangle in SVG that resizes to fit the page:\n\n```js\nhtml`<svg width=${width} height=200>\n  <rect width=${width} height=200 rx=10 ry=10></rect>\n</svg>`\n```"},{"name":"visibility","section":"<b>visibility</b>([<i>value</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/width.js \"Source\")\n\nReturns a promise that resolves with the specified *value* when this cell is visible in the viewport."},{"name":"html","section":"<b>html</b>\\`<i>string</i>\\` [<>](https://github.com/observablehq/stdlib/blob/master/src/html.js \"Source\")\n\nReturns the HTML element represented by the specified HTML *string* literal. This function is intended to be used as a [tagged template literal](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals_and_escape_sequences). Leading and trailing whitespace is automatically trimmed. For example, to create an H1 element whose content is “Hello, world!”:\n\n```js\nhtml`<h1>Hello, world!`\n```\n\nIf the resulting HTML fragment is not a single HTML element or node, is it wrapped in a DIV element. For example, this expression:\n\n```js\nhtml`Hello, <b>world</b>!`\n```\n\nIs equivalent to this expression:\n\n```js\nhtml`<div>Hello, <b>world</b>!</div>`\n```\n\nIf an embedded expression is a DOM element, it is embedded in generated HTML. For example, to embed [TeX](#tex) within HTML:\n\n```js\nhtml`I like ${tex`\\KaTeX`} for math.`\n```\n\nIf an embedded expression is an array, the elements of the array are embedded in the generated HTML. For example, to create a table from an array of values:\n\n```js\nhtml`<table>\n  <tbody>${[\"zero\", \"one\", \"two\"].map((name, i) => html`<tr>\n    <td>${name}</td><td>${i}</td>\n  </tr>`)}</tbody>\n</table>`\n```"},{"name":"svg","section":"<b>svg</b>\\`<i>string</i>\\` [<>](https://github.com/observablehq/stdlib/blob/master/src/svg.js \"Source\")\n\nReturns the SVG element represented by the specified SVG *string* literal. This function is intended to be used as a [tagged template literal](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals_and_escape_sequences). Leading and trailing whitespace is automatically trimmed. For example, to create an SVG element whose content is a circle:\n\n```js\nsvg`<svg width=16 height=16>\n  <circle cx=8 cy=8 r=4></circle>\n</svg>`\n```\n\nIf the resulting SVG fragment is not a single SVG element, is it wrapped in a G element. For example, this expression:\n\n```js\nsvg`\n<circle cx=8 cy=4 r=4></circle>\n<circle cx=8 cy=8 r=4></circle>\n`\n```\n\nIs equivalent to this expression:\n\n```js\nsvg`<g>\n  <circle cx=8 cy=4 r=4></circle>\n  <circle cx=8 cy=8 r=4></circle>\n</g>`\n```\n\nIf an embedded expression is a DOM element, it is embedded in generated SVG. If an embedded expression is an array, the elements of the array are embedded in the generated SVG."},{"name":"md","section":"<b>md</b>\\`<i>string</i>\\` [<>](https://github.com/observablehq/stdlib/blob/master/src/md.js \"Source\")\n\nReturns the HTML element represented by the specified Markdown *string* literal. Implemented by [Marked](https://github.com/markedjs/marked). Leading and trailing whitespace is automatically trimmed. For example, to create an H1 element whose content is “Hello, world!”:\n\n```js\nmd`# Hello, world!`\n```\n\nIf an embedded expression is a DOM element, it is embedded in generated HTML. For example, to embed [LaTeX](#tex) within Markdown:\n\n```js\nmd`My *favorite* number is ${tex`\\tau`}.`\n```\n\nIf an embedded expression is an array, the elements of the array are embedded in the generated HTML. The elements may either be strings, which are interpreted as Markdown, or DOM elements. For example, given an array of data:\n\n```js\nelements = [\n  {symbol: \"Co\", name: \"Cobalt\", number: 27},\n  {symbol: \"Cu\", name: \"Copper\", number: 29},\n  {symbol: \"Sn\", name: \"Tin\", number: 50},\n  {symbol: \"Pb\", name: \"Lead\", number: 82}\n]\n```\n\nTo create a table:\n\n```js\nmd`\n| Name      | Symbol      | Atomic number |\n|-----------|-------------|---------------|${elements.map(e => `\n| ${e.name} | ${e.symbol} | ${e.number}   |`)}\n`\n```"},{"name":"tex","section":"<b>tex</b>\\`<i>string</i>\\` [<>](https://github.com/observablehq/stdlib/blob/master/src/tex.js \"Source\")\n\nReturns the HTML element represented by the specified LaTeX *string* literal. Implemented by [KaTeX](https://github.com/Khan/KaTeX).\n\n```js\ntex`E = mc^2`\n```"},{"name":"tex.block","section":"tex.<b>block</b>\\`<i>string</i>\\` [<>](https://github.com/observablehq/stdlib/blob/master/src/tex.js \"Source\")\n\nEquivalent to [tex](#tex), but uses KaTeX’s display mode to produce a bigger block element rather than a smaller inline element.\n\n```js\ntex.block`E = mc^2`\n```"},{"name":"tex.options","section":"tex.<b>options</b>(<i>options</i>) [<>](https://github.com/observablehq/stdlib/blob/master/src/tex.js \"Source\")\n\nReturns a function equivalent to [tex](#tex), but with the specified *options*.\n\n```js\ntex.options({displayMode: true})`E = mc^2`\n```"},{"name":"require","section":"<b>require</b>(<i>names…</i>) [<>](https://github.com/d3/d3-require/blob/master/index.js \"Source\")\n\nReturns a promise of the [asynchronous module definition](https://github.com/amdjs/amdjs-api/blob/master/AMD.md) (AMD) with the specified *names*, loaded from [unpkg](https://unpkg.com/). Each module *name* can be a package (or scoped package) name optionally followed by the at sign (`@`) and a semver range. For example, to load [d3-array](https://github.com/d3/d3-array):\n\n```js\nd3 = require(\"d3-array\")\n```\n\nOr, to load [d3-array](https://github.com/d3/d3-array) and [d3-color](https://github.com/d3/d3-color) and merge them into a single object:\n\n```js\nd3 = require(\"d3-array\", \"d3-color\")\n```\n\nOr, to load [d3-array](https://github.com/d3/d3-array) 1.1.x:\n\n```js\nd3 = require(\"d3-array@1.1\")\n```\n\nSee [d3-require](https://github.com/d3/d3-require) for more information."},{"name":"require.resolve","section":"require.<b>resolve</b>(<i>name</i>) [<>](https://github.com/d3/d3-require/blob/master/index.js \"Source\")\n\nReturns a promise to the resolved URL to require the module with the specified *name*. For example:\n\n```js\nrequire.resolve(\"d3-array\") // \"https://unpkg.com/d3-array@1.2.1/build/d3-array.js\"\n```"},{"name":"require.alias","section":"require.<b>alias</b>(<i>aliases</i>) [<>](https://github.com/d3/d3-require/blob/master/index.js \"Source\")\n\nReturns a [require function](#require) with the specified *aliases*. For each key in the specified *aliases* object, any require of that key is substituted with the corresponding value. For example:\n\n```js\nReact = require(\"react@16/umd/react.production.min.js\")\n```\n```js\nReactDOM = require(\"react-dom@16/umd/react-dom.production.min.js\")\n```\n```js\nSemiotic = require.alias({\"react\": React, \"react-dom\": ReactDOM})(\"semiotic@1\")\n```\n\nEquivalently:\n\n```js\nr = require.alias({\n  \"react\": \"react@16/umd/react.production.min.js\",\n  \"react-dom\": \"react-dom@16/umd/react-dom.production.min.js\",\n  \"semiotic\": \"semiotic@1\"\n})\n```\n\nThen to require the libraries:\n\n```js\nReact = r(\"react\")\n```\n```js\nReactDOM = r(\"react-dom\")\n```\n```js\nSemiotic = r(\"semiotic\")\n```\n\n## Installing\n\nThe Observable standard library is built-in to Observable, so you don’t normally need to install or instantiate it directly. If you use NPM, `npm install @observablehq/stdlib`."},{"name":"Library","section":"<b>Library</b>([<i>resolve</i>]) [<>](https://github.com/observablehq/stdlib/blob/master/src/index.js \"Source\")\n\nReturns a new standard library object. If a *resolve* function is specified, it is a function that returns a promise to the URL of the module with the specified *name*; this is used internally by [require](#require) (and by extension, [md](#md) and [tex](#tex)). See [d3-require](https://github.com/d3/d3-require/blob/master/README.md) for details.\n\nFor example, to create the default standard library, and then use it to create a [canvas](#DOM_canvas):\n\n```js\nconst library = new Library();\nconst canvas = library.DOM.canvas(960, 500);\n```\n\nThe properties on the returned *library* instance correspond to the symbols (documented above) that are available in Observable notebooks. However, note that the library fields (such as *library*.now) are *definitions*, not values: the values may be wrapped in a function which, when invoked, returns the corresponding value."}]